# -*- coding: utf-8 -*-

"""
/***************************************************************************
 OpenWeather
                                 A QGIS plugin
 Downloading Weather Data From OpenWeather API
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-21
        copyright            : (C) 2023 by Htet Arkar Soe
        email                : htetarkar.env.2016@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Htet Arkar Soe'
__date__ = '2023-04-21'
__copyright__ = '(C) 2023 by Htet Arkar Soe'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterFeatureSource
from qgis.core import QgsProcessingParameterFeatureSink, QgsProcessingParameterString
import processing
import requests
from qgis.core import *
from qgis.PyQt.QtCore import QVariant, QCoreApplication
import os
import inspect
from qgis.PyQt.QtGui import QIcon
from PyQt5.QtCore import QVariant
from qgis.utils import iface

class multiPoints(QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):
        my_settings = QgsSettings()
        my_api_key = my_settings.value("openWeather_api", "")
        if my_api_key=="":
            api_key_text = 'Enter your API key '
        else:
            api_key_text = 'Enter your API key or use existing one below'
            
        #self.addParameter(QgsProcessingParameterFeatureSource('multipoints', 'Input Layer (**Add points layer into project)', types=[QgsProcessing.TypeVectorPoint], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('multipoints', 'Input Layer (**Add points layer into project)', types=[QgsProcessing.TypeVectorPoint], defaultValue=None))
        self.addParameter(QgsProcessingParameterFeatureSink('Calculated', 'calculated', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, supportsAppend=True, defaultValue=None))
        self.addParameter(QgsProcessingParameterString('API_key', api_key_text, multiLine=False, defaultValue=my_api_key))
        self.addParameter(QgsProcessingParameterEnum('DataType', 'Select OpenWeatherData to download', 
                            options=['Weather Data (Current)','Air Pollution (Current)'], 
                            allowMultiple=False, defaultValue=None
                            ))
                            
    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(1, model_feedback)
        results = {}
        outputs = {}
        my_settings = QgsSettings()
        data_types = ['weather?','air_pollution?']
        datatype = data_types[parameters['DataType']]
        
        coords = parameters['multipoints']
        spl_coords = coords.split(' [')
        
        try:
            list = QgsProject.instance().layerTreeRoot().children()
            layer_name = QgsProject.instance().mapLayersByName(list[0].name())

            layer_source = layer_name[0].source()   
            layer = QgsVectorLayer(layer_source, datatype, "ogr")
            if not layer.isValid():
                raise Exception("Layer is not valid.")
        except Exception:
            layer = QgsVectorLayer(spl_coords[0], datatype, "ogr")
            
        provider = layer.dataProvider()
        my_settings.setValue("openWeather_api", parameters['API_key'])
        API_key = parameters['API_key']
        fieldExit = len(layer.fields())
              
        # for weather data option
        if datatype == 'weather?':
            temp_layer = layer.materialize(QgsFeatureRequest())
            # QgsProject.instance().addMapLayer(memory_layer)
            # Start editing the layer
            temp_layer.startEditing()
            provider.addAttributes([QgsField("Country", QVariant.String, '', 255),
                            QgsField("City_Name", QVariant.String, '', 255),
                            QgsField("Temperature", QVariant.Double,'', 10, 2),
                            QgsField("Pressure", QVariant.Double,'', 10, 2),
                            QgsField("Humidity", QVariant.Double,'', 10, 2),
                            QgsField("Wind_Sp", QVariant.Double,'', 10, 2),
                            QgsField("Wind_Dir", QVariant.Double,'', 10, 2),
                            QgsField("Date", QVariant.Double,'', 10, 2),
                            QgsField("Lon", QVariant.Double,'', 10, 4),
                            QgsField("Lat", QVariant.Double,'', 10, 4)])
            temp_layer.updateFields()
                
            #for place in places:
            for feature in layer.getFeatures():
                geom = feature.geometry()
                lat = geom.asPoint().y()
                lon = geom.asPoint().x()
                url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_key}&units=metric"
                response = requests.get(url)
                data = response.json()
                lon = data["coord"]["lon"]
                lat = data["coord"]["lat"]
                #weather_main = data["weather"][0]["main"]
                #weather_description = data["weather"][0]["description"]
                temperature = data["main"]["temp"]
                #feels_like = data["main"]["feels_like"]
                pressure = data["main"]["pressure"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                cloudiness = data["clouds"]["all"]
                country = data["sys"]["country"]
                sunrise = data["sys"]["sunrise"]
                sunset = data["sys"]["sunset"]
                timezone = data["timezone"]
                city_id = data["id"]
                city_name = data["name"]
                cod = data["cod"]
                # temperature = data['main']['temp']
                # pressure = data['main']['pressure']
                # humidity = data['main']['humidity']
                # Wind_Sp = data['wind']['speed']
                Wind_Dir = data['wind']['deg']
                Date = data['dt']
                
                attr_value = {fieldExit+0:country,fieldExit+1:city_name,fieldExit+2:temperature,fieldExit+3:pressure,fieldExit+4:humidity,fieldExit+5:wind_speed,fieldExit+6:Wind_Dir,fieldExit+7:Date,fieldExit+8:lon,fieldExit+9:lat}
                id = feature.id()
                provider.changeAttributeValues({id:attr_value})
            temp_layer.commitChanges()
            QgsProject.instance().addMapLayer(temp_layer)
        
        else:
            temp_layer = layer.materialize(QgsFeatureRequest())
            provider.addAttributes([QgsField("CO", QVariant.Double,'', 10, 2),
                QgsField("NO", QVariant.Double,'', 10, 2),
                QgsField("NO2", QVariant.Double,'', 10, 2),
                QgsField("O3", QVariant.Double,'', 10, 2),
                QgsField("SO2", QVariant.Double,'', 10, 2),
                QgsField("PM25", QVariant.Double,'', 10, 2),
                QgsField("PM1010", QVariant.Double,'', 10, 2),
                QgsField("NH33", QVariant.Double,'', 10, 2),
                QgsField("Date", QVariant.Double,'', 10, 2),
                QgsField("AQI", QVariant.Double,'', 10, 2),
                QgsField("LON", QVariant.Double,'', 10, 4),
                QgsField("LAT", QVariant.Double,'', 10, 4)])
            layer.updateFields()
                
            for feature in layer.getFeatures():
                geom = feature.geometry()
                lat = geom.asPoint().y()
                lon = geom.asPoint().x()
                url = f"https://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={API_key}&units=metric"
                response = requests.get(url)
                data = response.json()
                lon = data["coord"]["lon"]
                lat = data["coord"]["lat"]
                aqi = data["list"][0]["main"]["aqi"]
                co = data["list"][0]["components"]["co"]
                no = data["list"][0]["components"]["no"]
                no2 = data["list"][0]["components"]["no2"]
                o3 = data["list"][0]["components"]["o3"]
                so2 = data["list"][0]["components"]["so2"]
                pm25 = data["list"][0]["components"]["pm2_5"]
                pm10 = data["list"][0]["components"]["pm10"]
                nh3 = data["list"][0]["components"]["nh3"]
                dt = data["list"][0]["dt"]
                # co = data['list'][0]['components'].values()[0]
                # no = list(data['list'][0]['components'].values())[1]
                # no2 = list(data['list'][0]['components'].values())[2]
                # o3 = list(data['list'][0]['components'].values())[3]
                # so2 = list(data['list'][0]['components'].values())[4]
                # pm25 = list(data['list'][0]['components'].values())[5]
                # pm10 = list(data['list'][0]['components'].values())[6]
                # nh3 = list(data['list'][0]['components'].values())[7]
                # dt = data['list'][0]['dt']
                attr_value = {0:co,1:no,2:no2,3:o3,4:so2,5:pm25,6:pm10,7:nh3,8:dt,9:aqi,10:lon,11:lat}
                id = feature.id()
                provider.changeAttributeValues({id:attr_value})
            temp_layer.commitChanges()
            QgsProject.instance().addMapLayer(temp_layer)
        
        return results

    def name(self):
        return 'OpenWeather Current Data (MultiPoints)'

    def displayName(self):
        return 'OpenWeather Current Data (MultiPoints)'
        
    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'weather.png')))
        return icon
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)
        
    def shortHelpString(self):
        help_text = """               
        This algorithm tool will download two types of data from OpenWeather (https://openweathermap.org)
        (1) Weather Data (windspeed, winddirection,temperature, humidity, pressure, etc...)
        (2) Air Pollution Data (CO, NO, NO2, O3, SO2, PM2.5, PM10, NH3, etc...)
        
        **Output File Format: point with attribute infromation
        **Free Register at openweathermap.org and get the Free API Key
        As of Feb 2022, API key is required for all data. 
        
        
        Developed by: Htet Arkar Soe
        Date: 2022-02-23
        email: htetarkar.env.2016@gmail.com 

        """
        return self.tr(help_text)
        
    def group(self):
        return ''

    def groupId(self):
        return ''

    def createInstance(self):
        return multiPoints()
