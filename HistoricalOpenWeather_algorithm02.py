# -*- coding: utf-8 -*-

"""
/***************************************************************************
 OpenWeather
                                 A QGIS plugin
 Downloading Weather Data From OpenWeather API
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-17
        copyright            : (C) 2022 by Htet Arkar Soe
        email                : htetarkar.env.2016@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Htet Arkar Soe'
__date__ = '2022-02-17'
__copyright__ = '(C) 2022 by Htet Arkar Soe'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import requests
import datetime
import time
import json
import csv
import os
import processing
import inspect
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterPoint,
                       QgsProcessingParameterString,
                       QgsCoordinateReferenceSystem,
                       QgsExpression,
                       QgsExpressionContext,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterDateTime,
                       QgsSettings)

#from .functions import wind_deg, wind_speed

class HistOpenWeatherAlgorithm2(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        my_settings = QgsSettings()
        my_api_key = my_settings.value("openWeather_api", "")
        if my_api_key=="":
            api_key_text = 'Enter your API key '
        else:
            api_key_text = 'Enter your API key or use existing one below'
        # We add the input vector features source. It can have any kind of
        # geometry.

        self.addParameter(QgsProcessingParameterPoint('ChooseLocationOnMap', 'Choose Location On Map', defaultValue=''))
        self.addParameter(QgsProcessingParameterString('API_key', api_key_text, multiLine=False, defaultValue=my_api_key))
        self.addParameter(QgsProcessingParameterFileDestination(self.OUTPUT,self.tr('Output File'),'CSV files (*.csv)'))
        
    def processAlgorithm(self, parameters, context, model_feedback):
        """
        Here is where the processing itself takes place.
        """
        my_settings = QgsSettings()
        #feedback = QgsProcessingMultiStepFeedback(3, model_feedback)
        results = {}
        outputs = {}
        
        source = parameters['ChooseLocationOnMap']
        csvOutput = self.parameterAsFileOutput(parameters, self.OUTPUT, context)
        
        ## DownloadJSON
        epsg = source.split(' ')[1]
        epsg = epsg[1:-1] # strip off [ ]
        points = source.split(' ')[0].split(',')
        lat = points[1]
        lon = points[0]
        if not(epsg=='EPSG:4326'):
            lat_exp =  f'y(transform(make_point({lat},{lon}),\'{epsg}\',\'EPSG:4326\'))'
            lon_exp =  f'x(transform(make_point({lat},{lon}),\'{epsg}\',\'EPSG:4326\'))'
            context_exp = QgsExpressionContext()
            
            lat = QgsExpression(lat_exp).evaluate(context_exp)
            lon = QgsExpression(lon_exp).evaluate(context_exp)
        
        today = datetime.datetime.today()
        today_stamp = time.mktime(today.timetuple())
        dt = today_stamp
        my_settings.setValue("openWeather_api", parameters['API_key'])
        apikey = parameters['API_key']
        params = {'lat':lat, 'lon':lon,'dt':round(dt), 'appid':apikey}
        r = requests.get(f'https://api.openweathermap.org/data/2.5/onecall/timemachine?',params=params)
        #https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=60.99&lon=30.9&dt=1648240121&appid=e82b705060b445b0835640a8dc0d4f67
        data = r.json()

        ## Create Variables for weather data
        count = 0
        header_added = False
        num_days = len(data['hourly'])
        fields = list(data['hourly'][0].keys())[1:-1]
        fields.append('datetime')
        fields.append('lon')
        fields.append('lat')
        while count < num_days:
            dt1 = data['hourly'][count]['dt']
            dt = datetime.datetime.fromtimestamp(dt1).strftime("%c")
            weather =list(data['hourly'][count].values())[1:-1]
            weather.append(dt)
            weather.append(lon)
            weather.append(lat)
            count += 1

            with open(csvOutput,'a') as f:
                if not header_added:
                    file = csv.writer(f)
                    file.writerow(fields)
                    header_added=True
                file = csv.writer(f)
                file.writerow(weather)

        ## Load CSV into Project
        file_name = os.path.basename(csvOutput)
        alg_params = {           
            'INPUT': csvOutput,
            'NAME': file_name
        }
        outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context, feedback=model_feedback, is_child_algorithm=True)
      
        return results

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'OpenWeather Weather Data (5-days ago)'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''
        
    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'weather.png')))
        return icon
        
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)
    def shortHelpString(self):
        help_text = """               
        This algorithm tool will download previous 5 days historical weather data from OpenWeather (https://openweathermap.org)
        **Weather Data ('dt', 'temp', 'feels_like', 'pressure', 'humidity', 'dew_point', 'uvi', 'clouds', 'visibility', 'wind_speed', 'wind_deg', 'wind_gust', etc...)
        **Output File Format: csv, point
        **Free Register at openweathermap.org and get the Free API Key
        
        As of Feb 2022, API key is required for all data. 
        
        
        Developed by: Htet Arkar Soe
        Date: 2022-02-23
        email: htetarkar.env.2016@gmail.com 
        """
        return self.tr(help_text)
        
    def createInstance(self):
        return HistOpenWeatherAlgorithm2()
